[
  // https://marketplace.visualstudio.com/items?itemName=vscodevim.vim
  // https://code.visualstudio.com/api/references/when-clause-contexts

  // Editor ---------------------------------------
  {
    "key": "escape",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorTextFocus"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "cmd+x",
    "command": "workbench.action.showCommands"
  },
  // <C-g>
  {
    "key": "ctrl+g",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.peekLocations.close",
    "when": "peekLocationListFocus"
  },
  {
    "key": "ctrl+g",
    "command": "editor.action.marker.nextInFiles",
    "when": "referenceSearchVisible"
  },
  {
    "key": "ctrl+g",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeHover",
    "when": "editorHoverVisible"
  },
  {
    "key": "ctrl+g",
    "command": "notifications.clearAll"
  },
  {
    "key": "ctrl+g",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "ctrl+g",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "ctrl+g",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeAccessibilityHelp",
    "when": "accessibilityHelpWidgetVisible && editorFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+g",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "ctrl+g",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "ctrl+g",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    "key": "ctrl+g",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+g",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "leaveSnippet",
    "when": "editorTextFocus && inSnippetMode"
  },
  {
    "key": "ctrl+g",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.hideErrorsWarnings",
    "when": "commentEditorFocused"
  },
  // File Tree
  {
    "key": "ctrl+t",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+y",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": ["filesExplorer.copy", "filesExplorer.paste"]
    },
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+enter",
    "command": "explorer.openToSide",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+w ctrl+w",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+v",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+m",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+x",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+c",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+c ctrl+d",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "cmd+1",
    "command": "workbench.action.toggleSidebarVisibility"
  },

  // Code -----------------------------------------
  {
    "key": "ctrl+.",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+enter",
    "command": "editor.action.quickFix"
  },
  {
    "key": "ctrl+c ctrl+r",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+c ctrl+t",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "workbench.view.extension.test",
        "test-explorer.run-test-at-cursor",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "when": "editorFocus"
  },

  // Navigation -----------------------------------
  {
    "key": "ctrl+x ctrl+f",
    "command": "workbench.action.files.openFile"
  },
  {
    "key": "cmd+t",
    "command": "workbench.action.openRecent"
  },
  {
    "key": "shift+cmd+t",
    "command": "workbench.action.newWindow"
  },
  {
    "key": "cmd+`",
    "command": "workbench.action.showPreviousWindowTab"
  },

  // <C-j> and <C-k>
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // Magit
  {
    "key": "g g",
    "command": "cursorTop",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "g r",
    "command": "magit.refresh",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "-",
    "command": "magit.reverse-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  {
    "key": "shift+-",
    "command": "magit.reverting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },
  // Github Copilot
  {
    "key": "ctrl+g",
    "command": "inlineChat.cancel",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "cmd+enter",
    "command": "inlineChat.viewInChat",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "cmd+enter",
    "command": "workbench.action.quickchat.openInChatView",
    "when": "inQuickOpen"
  },
  {
    "key": "cmd+0",
    "command": "workbench.action.togglePanel",
    "args": {
      "panelId": "terminal"
    }
  },

  // Terminal -----------------------------------
  {
    "key": "cmd+t",
    "command": "workbench.action.quickOpenTerm",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+r",
    "command": "workbench.action.terminal.rename",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+w ctrl+w",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  }
]
