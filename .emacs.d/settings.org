#+TITLE: Emacs Configuration
#+AUTHOR: Darius Kryszczuk
#+EMAIL: darius.kryszczuk@gmail.com

* Core
** =custom-file=
   #+BEGIN_SRC emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (load custom-file 'noerror)
   #+END_SRC
** =auto-save-files=
   #+BEGIN_SRC emacs-lisp
   ;;(setq auto-save-default nil)
   (setq auto-save-file-name-transforms `((".*" "~/.emacs-saves/" t)))
   #+END_SRC
** =backup-files=
   #+BEGIN_SRC emacs-lisp
   (setq make-backup-files nil)
   ;;(setq backup-directory-alist '(("." . "~/.emacs-saves")))
   #+END_SRC
** =package-archives=
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq
    package-archives
    '(
      ("melpa" . "https://melpa.org/packages/")
      ("melpa-stable" . "http://stable.melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
      ("gnu" . "https://elpa.gnu.org/packages/"))

    package-archive-priorities
    '(
      ("melpa" . 20)
      ("melpa-stable" . 10)
      ("org" . 5)
      ("gnu" . 5)))

    (when (version< emacs-version "27.0") (package-initialize))
    (setq package-enable-at-startup nil)
   #+END_SRC
** =use-package=
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (eval-when-compile (require 'use-package))
   (use-package delight :ensure t)
   (use-package diminish :ensure t)
   (use-package use-package-ensure-system-package :ensure t)
   #+END_SRC
** Defaults
   #+BEGIN_SRC emacs-lisp
   (setq-default
    user-full-name "Darius Kryszczuk"
    user-mail-address "darius.kryszczuk@gmail.com"
    tab-width 4
    indent-tabs-mode nil
    load-prefer-newer t
    use-package-always-ensure t
    display-line-numbers 'relative
    display-line-numbers-current-absolute nil
    display-line-numbers-grow-only t
    recentf-max-menu-items 125
    recentf-max-saved-items 125
    electric-indent-mode -1
    evil-search-module 'evil-search
    scroll-conservatively most-positive-fixnum)
   (cd "~/dev")
   (electric-pair-mode t)
   (global-visual-line-mode t)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (show-paren-mode)
   (global-hl-line-mode t)
   (set-face-attribute hl-line-face nil :underline nil)
   (fset 'yes-or-no-p 'y-or-n-p)
   (recentf-mode 1)
   (diminish 'visual-line-mode)
   (global-auto-revert-mode t)
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+END_SRC
* Visuals
** Fonts
   *NOTE:* install "Source Code Pro Medium" in your system.
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :font "Source Code Pro Medium" :height 100)
   (set-fontset-font t 'latin "Noto Sans")
   #+END_SRC
** Icons
   *NOTE:* if it's the first time that you install the package, you must run =M-x all-the-icons-install-fonts=.
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :custom
     (all-the-icons-scale-factor 1.0))
   #+END_SRC
** Theme
*** Modus
    #+BEGIN_SRC emacs-lisp
    (use-package modus-operandi-theme)
    (use-package modus-vivendi-theme
      :config (load-theme 'modus-vivendi t))
    #+END_SRC
* Packages
** Evil
   #+BEGIN_SRC emacs-lisp
   (use-package evil-leader
     :init
     (setq evil-want-integration t)
     (setq evil-want-keybinding nil)
     (setq evil-leader/in-all-states t)
     (setq evil-respect-visual-line-mode t)
     :config
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>")
     (evil-leader/set-key
       "dd" 'lsp-find-definition
       "pd" 'lsp-ui-peek-find-definition
       "ii" 'lsp-find-implementation
       "pi" 'lsp-ui-peek-find-implementation
       "rr" 'lsp-find-references
       "pr" 'lsp-ui-peek-find-references
       "ss" 'lsp-ui-peek-find-workspace-symbol
       "aa" 'lsp-execute-code-action
       "bb" 'counsel-projectile-switch-to-buffer
       "pp" 'projectile-switch-project
       "<SPC>" 'counsel-projectile-find-file
       "ff" 'counsel-projectile-rg
       "tt" 'treemacs
       "]" 'flycheck-next-error
       "[" 'flycheck-previous-error
       "gp" 'prettier-js
       "gl" 'lsp-eslint-apply-all-fixes
       "go" 'engine/search-google
       "oi" 'org-indent-region
       "ipp" 'indent-pp-sexp
       "ai" 'lsp-java-add-import
       "w" 'evil-window-next))

   (use-package evil
     :init
     (setq evil-search-module 'evil-search)
     (setq evil-ex-complete-emacs-commands nil)
     (setq evil-vsplit-window-right t)
     (setq evil-split-window-below t)
     (setq evil-shift-round nil)
     (setq evil-want-C-u-scroll t)
     (with-eval-after-load 'comint (define-key comint-mode-map "\C-d" nil))
     (setq evil-respect-visual-line-mode t)
     :custom
     (evil-want-C-u-scroll t)
     :config
     (evil-ex-define-cmd "ls" 'ibuffer)
     (evil-ex-define-cmd "term" 'shell)
     (evil-mode 1))

   (use-package evil-collection
     :after evil
     :config
     (setq evil-collection-mode-list nil)
     (evil-collection-init '(doc-view eww ibuffer dired calendar company)))

   (use-package evil-surround
     :requires (evil)
     :config
     (global-evil-surround-mode))

   (use-package evil-commentary
     :requires (evil)
     :delight
     :config
     (evil-commentary-mode))

   (use-package evil-magit
     :requires (evil))

   (use-package evil-vimish-fold
     :after vimish-fold
     :delight
     :init
     (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
     :config
     (global-evil-vimish-fold-mode))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :config
     (setq magit-auto-revert-mode nil))
   #+END_SRC
** Org
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c a") 'org-agenda)
   (global-set-key (kbd "C-c c") 'org-capture)
   (global-set-key (kbd "C-c o") 'org-pomodoro)
   (setq org-todo-keywords '("TODO" "DONE"))
   (defvar org-src-fontify-natively t)
   (setq org-agenda-files (directory-files-recursively "~/org/agenda" "org$"))
   (setq org-default-notes-file "~/org/agenda/organizer.org")
   (set-register ?o '(file . "~/org/agenda/organizer.org"))
   (setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

   (use-package org-pomodoro)
   (use-package ob-http)
   (use-package ob-elixir)
   (org-babel-do-load-languages 'org-babel-load-languages
    '(
      (emacs-lisp . t)
      (js . t)
      (python . t)
      (elixir . t)
      (plantuml . t)
      (http . t)))
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :delight
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     :bind ("C-c C-r" . ivy-resume))

   (use-package swiper
     :bind ("C-s" . swiper))

   (use-package counsel
     :bind (("M-x" . counsel-M-x)
            ("C-x C-f" . counsel-find-file)
            ("C-x C-b" . counsel-switch-buffer)
            ("C-x C-r" . counsel-recentf)))

   (use-package counsel-projectile
     :config
     (counsel-projectile-mode +1))

   (use-package ivy-xref
     :ensure t
     :init
     (when (>= emacs-major-version 27)
       (setq xref-show-definitions-function #'ivy-xref-show-defs))
     (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :custom
     (projectile-sort-order 'recentf)
     (projectile-indexing-method 'hybrid)
     (projectile-completion-system 'ivy)
     :config
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "C-c p") #'projectile-command-map)
     (define-key projectile-mode-map (kbd "s-p") #'projectile-find-file)
     (define-key projectile-mode-map (kbd "s-F") #'projectile-ripgrep))
   #+END_SRC
** Treemacs
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :defer t
     :init
     (with-eval-after-load 'winum
       (define-key winum-keymap (kbd "M-0") #'treemacs))
     :config
     (progn
       (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
             treemacs-deferred-git-apply-delay      0.5
             treemacs-directory-name-transformer    #'identity
             treemacs-display-in-side-window        t
             treemacs-eldoc-display                 t
             treemacs-file-event-delay              5000
             treemacs-file-extension-regex          treemacs-last-period-regex-value
             treemacs-file-follow-delay             0.2
             treemacs-file-name-transformer         #'identity
             treemacs-follow-after-init             t
             treemacs-git-command-pipe              ""
             treemacs-goto-tag-strategy             'refetch-index
             treemacs-indentation                   2
             treemacs-indentation-string            " "
             treemacs-is-never-other-window         nil
             treemacs-max-git-entries               5000
             treemacs-missing-project-action        'ask
             treemacs-no-png-images                 nil
             treemacs-no-delete-other-windows       t
             treemacs-project-follow-cleanup        nil
             treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
             treemacs-position                      'left
             treemacs-recenter-distance             0.1
             treemacs-recenter-after-file-follow    nil
             treemacs-recenter-after-tag-follow     nil
             treemacs-recenter-after-project-jump   'always
             treemacs-recenter-after-project-expand 'on-distance
             treemacs-show-cursor                   nil
             treemacs-show-hidden-files             t
             treemacs-silent-filewatch              nil
             treemacs-silent-refresh                nil
             treemacs-sorting                       'alphabetic-asc
             treemacs-space-between-root-nodes      t
             treemacs-tag-follow-cleanup            t
             treemacs-tag-follow-delay              1.5
             treemacs-width                         35)

       ;; The default width and height of the icons is 22 pixels. If you are
       ;; using a Hi-DPI display, uncomment this to double the icon size.
       ;;(treemacs-resize-icons 44)

       (treemacs-follow-mode t)
       (treemacs-filewatch-mode t)
       (treemacs-fringe-indicator-mode t)
       (pcase (cons (not (null (executable-find "git")))
                    (not (null treemacs-python-executable)))
         (`(t . t)
           (treemacs-git-mode 'deferred))
         (`(t . _)
           (treemacs-git-mode 'simple))))
     :bind (:map global-map
           ("M-0"       . treemacs-select-window)
           ("C-x t t"   . treemacs)
           ("C-x t B"   . treemacs-bookmark)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)))

   (use-package treemacs-evil
     :after treemacs evil)

   (use-package treemacs-projectile
     :after treemacs projectile)

   (use-package treemacs-icons-dired
     :after dired
     :config (treemacs-icons-dired-mode))

   (use-package treemacs-magit
     :after treemacs magit)
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :hook (prog-mode . flycheck-mode)
     :delight
     :init
     (global-flycheck-mode t)
     :custom
     (flycheck-check-syntax-automatically '(save mode-enabled newline))
     (flycheck-display-errors-delay 0.1))

   (use-package flycheck-pos-tip
     :after flycheck)
   #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :delight
     :init
     (setq company-minimum-prefix-length 2
           company-tooltip-limit 14))

   (use-package company-prescient
     :after (company)
     :hook (company-mode . company-prescient-mode)
     :config
     (prescient-persist-mode +1))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :hook (lsp-mode . lsp-enable-which-key-integration)  
     :config
     (which-key-mode))
   #+END_SRC
** engine-mode
   #+BEGIN_SRC emacs-lisp
   (use-package engine-mode
     :defer 3
     :config
     (setq engine/browser-function 'eww-browse-url)
     (defengine google
       "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
       :keybinding "f")

     (defengine github
       "https://github.com/search?ref=simplesearch&q=%s"
       :keybinding "g")

     (defengine google-images
       "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
       :keybinding "i")

     (defengine google-maps
       "http://maps.google.com/maps?q=%s"
       :keybinding "m")

     (defengine stack-overflow
       "https://stackoverflow.com/search?q=%s"
       :keybinding "s")

     (defengine youtube
       "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
       :keybinding "y")

     (defengine wikipedia
       "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
       :keybinding "w"
       :docstring "Searchin' the wikis.")
     (engine-mode t))
   #+END_SRC
** Undo-Tree
   #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure nil
      :delight)
   #+END_SRC
** Eldoc
   #+BEGIN_SRC emacs-lisp
    (use-package eldoc
      :ensure nil
      :delight)
   #+END_SRC
** PlantUML
   #+BEGIN_SRC emacs-lisp
   (use-package plantuml-mode
     :mode (("\\.puml$" . plantuml-mode)
	        ("\\.plantuml$" . plantuml-mode))
     :config
     (setq plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))
     (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))
     (setq plantuml-default-exec-mode 'jar)
     )
   #+END_SRC
** restclient
   #+BEGIN_SRC emacs-lisp
   (use-package restclient
     :init
     (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode)))
   #+END_SRC
** dired
   #+BEGIN_SRC emacs-lisp
   (use-package dired-narrow
     :ensure t
     :bind (:map dired-mode-map ("/" . dired-narrow)))

   (use-package dired-du)
   #+END_SRC
** HTMLize
   #+BEGIN_SRC emacs-lisp
   (use-package htmlize)
   #+END_SRC
** vimish-fold
   #+BEGIN_SRC emacs-lisp
   (use-package vimish-fold
     :config (vimish-fold-global-mode 1))
   #+END_SRC
** LSP
*** Core
**** =lsp-mode=
     *NOTE:* In order to use Elixir, clone =elixir-lsp= (~git clone https://github.com/elixir-lsp/elixir-ls.git~) and run ~mix deps.get~ and ~mix elixir_ls.release~.
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook ((java-mode
               js-mode
               prog-mode
               elixir-mode
               rust-mode
               web-mode) . lsp)
       :commands (lsp)
       :custom
       (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
       (lsp-enable-symbol-highlighting nil)
       (lsp-signature-auto-activate nil)
       (lsp-eslint-auto-fix-on-save nil)
       (lsp-rust-server 'rust-analyzer) ; https://rust-analyzer.github.io/manual.html#installation
       :init
       (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
       (add-to-list 'exec-path "/home/darius/dev/elixir-ls/release")
       (setenv "TSSERVER_LOG_FILE" "/tmp/tsserver.log"))
     #+END_SRC
**** =lsp-ui=
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-ui
       :config
       (setq lsp-ui-sideline-enable nil)
       (setq lsp-ui-doc-enable nil))
     #+END_SRC
**** =lsp-ivy=
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-ivy
       :requires (lsp-mode ivy))
     #+END_SRC
**** =company-lsp=
     #+BEGIN_SRC emacs-lisp
     (use-package company-lsp
       :config
       (push 'company-lsp company-backends)
       (setq company-lsp-async t
             company-lsp-cache-candidates 'auto
             company-lsp-enable-recompletion t))
     #+END_SRC
*** Languages
**** Web
***** =prettier-js=
      *NOTE:* Install =prettier= first.
      #+BEGIN_SRC emacs-lisp
      (use-package prettier-js
        :delight
        :custom (prettier-js-args '("--print-width" "100"
                                    "--single-quote" "true"
                                    "--trailing-comma" "none"
                                    "--semi" "false")))
      #+END_SRC
***** =web-mode=
      #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :hook ((css-mode web-mode) . rainbow-mode)
        :mode (("\\.html?\\'" . web-mode)
               ("\\.js\\'" . web-mode)
               ("\\.css\\'" . web-mode)
               ("\\.jsx\\'" . web-mode)
               ("\\.ts\\'" . web-mode)
               ("\\.tsx\\'" . web-mode))
        :custom
        (web-mode-attr-indent-offset 2)
        (web-mode-block-padding 2)
        (web-mode-css-indent-offset 2)
        (web-mode-code-indent-offset 2)
        (web-mode-comment-style 2)
        (web-mode-enable-current-element-highlight t)
        (web-mode-markup-indent-offset 2))
      #+END_SRC
***** =rainbow-mode=
      #+BEGIN_SRC emacs-lisp
       (use-package rainbow-mode
         :delight
         :hook (web-mode . rainbow-mode))
      #+END_SRC
***** =json-mode=
      #+BEGIN_SRC emacs-lisp
      (use-package json-mode)
      #+END_SRC
**** Java
     *NOTE:* Java LSP should be installed automatically. If not, install [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT Language Server]] and correct path below.
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-java
       :after (lsp)
       :custom (
       (lsp-java-server-install-dir (expand-file-name "eclipse.jdt.ls/server" user-emacs-directory))))
     #+END_SRC
**** Elixir
     #+BEGIN_SRC emacs-lisp
     (use-package elixir-mode
       :hook (elixir-mode . alchemist-mode))

     (use-package alchemist
       :hook (alchemist-iex-mode . company-mode))
     #+END_SRC
**** Rust
     #+BEGIN_SRC emacs-lisp
     (use-package toml-mode)

     (use-package rust-mode
        :hook (rust-mode . lsp)
        :config 
        (setq rust-format-on-save t))

     (use-package cargo
        :hook (rust-mode . cargo-minor-mode))

     (use-package flycheck-rust
        :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
     #+END_SRC
* Custom Lisp
  My custom elisp functions.
** =deeper-blue-custom-theme=
   #+BEGIN_SRC emacs-lisp
   (defun load-theme-deeper-blue ()
     (interactive)
     (load-theme 'deeper-blue t)
     (let ((custom--inhibit-theme-enable nil))
       (custom-theme-set-faces
        'deeper-blue
        '(mode-line ((t (:background "gray75" :foreground "black" :box (:style nil)))))
        '(mode-line-buffer-id ((t (:weight bold :background nil :foreground "blue4"))))
        '(mode-line-inactive ((t (:background "gray40" :foreground "black" :box (:style nil)))))
        '(region ((t (:background "gray40"))))
        '(cursor ((t (:background "#ff4f00"))))
        )
       )
     )
   #+END_SRC
   
