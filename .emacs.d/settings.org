#+TITLE: Emacs Configuration
#+AUTHOR: Darius Kryszczuk
#+EMAIL: darius.kryszczuk@gmail.com

* Core
** =custom-file=
   #+BEGIN_SRC emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (load custom-file 'noerror)
   #+END_SRC
** =auto-save-files=
   #+BEGIN_SRC emacs-lisp
   (setq auto-save-file-name-transforms `((".*" "~/.emacs-saves/" t)))
   #+END_SRC
** =backup-files=
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs-saves")))
   #+END_SRC
** =package-archives=
   #+BEGIN_SRC emacs-lisp
   (require 'package)
    
   (setq
    package-archives
    '(
      ("melpa-stable" . "http://stable.melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
      ("gnu" . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
      )

    package-archive-priorities
    '(
      ("melpa-stable" . 10)
      ("org" . 5)
      ("gnu" . 5)
      ("melpa" . 0)
      ))

   (package-initialize)
   (setq package-enable-at-startup nil)
   #+END_SRC
** =use-package=
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (eval-when-compile (require 'use-package))
   (use-package delight :ensure t)
   (use-package use-package-ensure-system-package :ensure t)
   #+END_SRC
** Defaults 
   #+BEGIN_SRC emacs-lisp
   (setq-default
	user-full-name "Darius Kryszczuk"
	user-mail-address "darius.kryszczuk@gmail.com"
    tab-width 4
	indent-tabs-mode nil
	load-prefer-newer t
	use-package-always-ensure t
    display-line-numbers 'relative
    display-line-numbers-current-absolute nil
    display-line-numbers-grow-only t
    recentf-max-menu-items 25
    recentf-max-saved-items 25
    scroll-conservatively most-positive-fixnum)
   (cd "~/dev")
   (electric-pair-mode)
   (winner-mode t)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (show-paren-mode)
   (global-hl-line-mode t)
   (fset 'yes-or-no-p 'y-or-n-p)
   (recentf-mode 1)
   (load-theme 'wombat)
   #+END_SRC
* Visuals
** Fonts
   *NOTE:* install "Source Code Pro Medium" in your system.
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :font "Source Code Pro Medium" :height 110)
   (set-fontset-font t 'latin "Noto Sans")
   #+END_SRC
** Icons
   *NOTE:* if it's the first time that you install the package, you must run =M-x all-the-icons-install-fonts=.
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons)
   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
   (use-package solaire-mode
     :custom (solaire-mode-remap-fringe t)
     :config
     (solaire-global-mode +1))
   #+END_SRC
* Packages
** Evil
   #+BEGIN_SRC emacs-lisp
   (use-package evil
     :init
     (setq evil-search-module 'evil-search)
     (setq evil-ex-complete-emacs-commands nil)
     (setq evil-vsplit-window-right t)
     (setq evil-split-window-below t)
     (setq evil-shift-round nil)
     (setq evil-want-C-u-scroll t)
     :config
     (evil-mode 1))
   
   (use-package evil-surround
     :requires (evil)
     :config
     (global-evil-surround-mode))
     
   (use-package evil-commentary
     :requires (evil)
     :config
     (evil-commentary-mode))
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     :bind ("C-c C-r" . ivy-resume))
     
   (use-package swiper
     :bind ("C-s" . swiper))  
     
   (use-package counsel 
     :bind (("M-x" . counsel-M-x)
            ("C-x C-f" . counsel-find-file)
            ("C-x C-r" . counsel-recentf)))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :init
     (global-flycheck-mode t))
   #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
   (use-package company)
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet)
   #+END_SRC
** LSP
*** Core
**** =lsp-mode=
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands (lsp)
       :custom
       (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
       :hook (prog-mode . lsp))
     #+END_SRC
**** =lsp-ui=
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-ui
       :requires (lsp-mode flycheck)
       :commands lsp-ui-mode
       :custom 
       (lsp-ui-sideline-show-symbol nil)
       (lsp-ui-sideline-show-code-actions nil)
       (lsp-ui-sideline-show-diagnostics t)
       :hook (lsp-mode . lsp-ui-mode))
       #+END_SRC
**** =company-lsp= 
     #+BEGIN_SRC emacs-lisp
     (use-package company-lsp
       :requires (company)
       :config 
       (push 'company-lsp company-backends)
       (setq company-lsp-async t
             company-lsp-cache-candidates 'auto
             company-lsp-enable-recompletion t))
     #+END_SRC
**** =lsp-ivy=
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-ivy
       :requires (lsp-mode ivy))
     #+END_SRC
*** Languages
**** Typescript
     #+BEGIN_SRC emacs-lisp
     (use-package typescript-mode
       :after (lsp)
       :mode ("\\.tsx\\'" . typescript-mode)
       :hook(typescript-mode . lsp))
     #+END_SRC
**** Java
     Java LSP should be installed automatically. If not, install [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT Language Server]] and correct path below.
     #+BEGIN_SRC emacs-lisp
     (use-package lsp-java 
       :after (lsp)
       :custom (lsp-java-server-install-dir (expand-file-name "eclipse.jdt.ls/server" user-emacs-directory))
       :hook (java-mode . lsp))
     #+END_SRC
