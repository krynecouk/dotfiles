#+TITLE: Emacs Configuration
#+AUTHOR: Darius Kryszczuk
#+EMAIL: darius.kryszczuk@gmail.com

* Core
** =custom-file=
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file 'noerror)
   #+END_SRC
** =package-archives=
   #+BEGIN_SRC emacs-lisp
   (require 'package)
    
   (setq
    package-archives
    '(
      ("melpa-stable" . "http://stable.melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
      ("gnu" . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
      )

    package-archive-priorities
    '(
      ("melpa-stable" . 10)
      ("org" . 5)
      ("gnu" . 5)
      ("melpa" . 0)
      ))

   (package-initialize)
   (setq package-enable-at-startup nil)
   #+END_SRC
** =use-package=
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (eval-when-compile (require 'use-package))
   #+END_SRC
** Basic 
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode)
     (winner-mode t)
     (setq scroll-step 1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (show-paren-mode)
     (global-hl-line-mode t)
     (load-theme 'wombat)
   #+END_SRC
* Packages
** Evil
   #+BEGIN_SRC emacs-lisp
   (use-package evil
     :ensure t
     :init
     (setq evil-search-module 'evil-search)
     (setq evil-ex-complete-emacs-commands nil)
     (setq evil-vsplit-window-right t)
     (setq evil-split-window-below t)
     (setq evil-shift-round nil)
     (setq evil-want-C-u-scroll t)
     :config
     (evil-mode 1)
   
     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode)))
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; Ivy Keybindings
     (global-set-key (kbd "C-c C-r") 'ivy-resume))
     
   (use-package swiper
     :ensure t
     :config
     (global-set-key "\C-s" 'swiper))  
     
   (use-package counsel 
     :ensure t
     :config 
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file))
   #+END_SRC
