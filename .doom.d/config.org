#+TITLE: Emacs Configuration
#+AUTHOR: Darius Kryszczuk
#+EMAIL: darius.kryszczuk@gmail.com

* Prerequisites
** Mandatory
- Git 2.23+
- Emacs 26.1+ (27 is recommended) with GNUTLS support
- [[https://github.com/BurntSushi/ripgrep][ripgrep]] 11.0+
- [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]] font
** Optional
- [[https://github.com/sharkdp/fd][fd]] 7.3.0+ (improves file indexing performance for some commands)
- CMake 3.10.0+ (vterm)
- [[https://github.com/koalaman/shellcheck][shellcheck]]
- [[https://github.com/markedjs/marked][marked]]
- [[https://github.com/beautify-web/js-beautify][js-beautify]]
- [[https://github.com/stylelint/stylelint][stylelint]]

* Defaults
#+BEGIN_SRC emacs-lisp
(setq
 user-full-name "Darius Kryszczuk"
 user-mail-address "darius.kryszczuk@gmail.com"
 display-line-numbers-type 'relative
 display-line-numbers-current-absolute nil
 doom-scratch-initial-major-mode 'emacs-lisp-mode)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Bindings
** Global
#+BEGIN_SRC emacs-lisp
(map!
 "M-k" #'drag-stuff-up
 "M-j" #'drag-stuff-down
 "C-c a" #'org-agenda
 "C-c c" #'org-capture
 "C-c o" #'org-pomodoro
 (:prefix "g"
   :n "]" #'flycheck-next-error
   :n "[" #'flycheck-previous-error
   )
  )
#+END_SRC
** Leader
#+BEGIN_SRC emacs-lisp
(map! :leader :prefix ("t" . "toggle")
      :desc "Treemacs" "t" #'+treemacs/toggle
      :desc "Undo Tree" "u" #'undo-tree-mode
      :desc "Calc" "c" #'calc)

(map! :leader :prefix ("s" . "search")
      :desc "Google" "g" #'eww)

(map! :leader :prefix ("c" . "code")
      :desc "Next error" "]" #'flycheck-next-error
      :desc "Previous error" "[" #'flycheck-previous-error)

(map! :leader :prefix ("o" . "open")
      :desc "Eww" "w" #'eww)
#+END_SRC
** Mode
#+BEGIN_SRC emacs-lisp
(map!
 ;;; eww
 (:after eww
  :map eww-mode-map
  :n "q" (lambda ()
           "Quit window only if popup."
           (interactive)
           (while (+popup--p) (+popup/quit-window)))
  (:prefix "g"
   :n "r" #'eww-reload
   :n "R" #'+eww/rename
   :n "+" #'+eww/raise)))
#+END_SRC

* Visuals
#+BEGIN_SRC emacs-lisp
(setq
 doom-themes-treemacs-theme "Default"
 doom-themes-treemacs-enable-variable-pitch t
 doom-font (font-spec :family "JetBrains Mono" :size 13)
 +doom-dashboard-banner-dir (concat doom-private-dir "banners/")
 doom-modeline-height 22
 doom-modeline-major-mode-color-icon t
 all-the-icons-scale-factor 1)
#+END_SRC

* Packages
** Org
If ~org-preserve-local-variables~ occurs run ~rm ~/.emacs.d/.local/straight/build/org-mode/*.elc~.
#+BEGIN_SRC emacs-lisp
(use-package! org
  :config
  (setq org-directory (expand-file-name "~/dev/org"))
  (setq browse-url-browser-function 'eww-browse-url)

  (setq org-inbox (expand-file-name "inbox.org" org-directory)
        org-projects (expand-file-name "projects.org" org-directory)
        org-someday (expand-file-name "someday.org" org-directory)
        org-tickler (expand-file-name "tickler.org" org-directory)
        org-notes (expand-file-name "notes.org" org-directory))

  (setq org-agenda-files (list org-inbox org-projects org-tickler)
        org-default-notes-file org-notes
        org-refile-targets '(
                             (org-inbox :maxlevel . 1)
                             (org-projects :maxlevel . 2)
                             (org-someday :level . 1)
                             (org-tickler :level . 1)
                             )
        org-capture-templates '(("t" "Todo" entry (file+headline org-inbox "Tasks")
                                 "* TODO %i%?")
                                ("c" "Code Todo" entry (file+headline org-inbox "Code Tasks")
                                 "* TODO %i%?\n Entered on: %U - %a\n")
                                ("n" "Note" entry (file+olp+datetree org-default-notes-file)
                                "* %?\n\n")
                                ("T" "Tickler" entry (file+headline org-tickler "Tickler")
                                 "* %?\n\n %U"))))

(after! org
           (setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

           (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "CANCELLED(c)" "DONE(d)")
                                     (sequence "[ ](T)" "|" "[X](D)")
                                     (sequence "POMODORO(o)" "|" "POMODOROFF(f)")))

           (setq org-todo-keyword-faces
                 '(("TODO" . "#f3722c")
                   ("WAITING" . "#f9c74f")
                   ("CANCELLED" . "#577590")
                   ("POMODORO" . "#f94144")
                   ("POMODOROFF" . "#43aa8b")
                   ("DONE" . "#43aa8b"))))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package! undo-tree
  :defer t
  :custom
  (undo-tree-visualizer-diff t)
  (undo-tree-visualizer-timestamps t))
#+END_SRC
** Eww
#+BEGIN_SRC emacs-lisp
(use-package! eww
  :config
  (setq eww-search-prefix "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"))

(after! eww
  (set-popup-rule! "*eww"
    :size 100
    :side 'right
    :ttl nil
    :quit #'+popup--p)
  (add-hook 'eww-after-render-hook
            (lambda ()
              (setq-local header-line-format nil)
              (doom-mark-buffer-as-real-h)
              (persp-add-buffer (current-buffer)))))
#+END_SRC
** Rustic
#+BEGIN_SRC emacs-lisp
(use-package! rustic
  :hook (rustic-mode-hook . format-all-mode))
#+END_SRC

* Custom Elisp
My custom elisp functions.
** Popup
#+BEGIN_SRC emacs-lisp
(defun +popup--p (&optional window)
  "Returns t when WINDOW (or selected window) is a popup."
  (when (+popup-window-p (or window (selected-window))) t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun +popup/p ()
  "Returns t when selected window is a popup."
  (interactive)
  (message "Is popup -> %s" (if (+popup--p) "True" "False")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun +popup/raise-to-split-window ()
  "Raise popup to vertically splitted window."
  (interactive)
  (unless (+popup--p)
    (user-error "Cannot raise a non-popup window"))
  (other-window 1)
  (when (< (length (doom-visible-windows)) 2)
    (+evil-window-vsplit-a))
  (select-window (car (last (doom-visible-windows))))
  (+popup/other)
  (+popup/raise (selected-window)))
#+END_SRC

** Eww
#+BEGIN_SRC emacs-lisp
(defun +eww/rename ()
  "Rename eww buffer. Current page title as a default."
  (interactive)
  (let ((name (read-from-minibuffer "New name: " (+eww/page-title))))
       (rename-buffer name t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun +eww/raise ()
  "Raise eww buffer and rename it to the page title."
  (interactive)
  (+popup/raise-to-split-window)
  (rename-buffer (+eww/page-title) t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun +eww/page-title ()
  "Returns web page title or nil. Print as side effect."
  (interactive)
  (when (eq major-mode 'eww-mode )
    (message (plist-get eww-data :title))))
#+END_SRC
